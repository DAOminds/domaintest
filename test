<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>3D Domänen-Netzwerk</title>
  <style>
    body { margin: 0; overflow: hidden; }
    canvas { display: block; }
    .label {
      position: absolute;
      color: white;
      font-family: sans-serif;
      pointer-events: none;
    }
  </style>
</head>
<body>
  <script type="module">
    import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.155/build/three.module.js';
    import { OrbitControls } from 'https://cdn.jsdelivr.net/npm/three@0.155/examples/jsm/controls/OrbitControls.js';

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    const controls = new OrbitControls(camera, renderer.domElement);

    // Domänen (Nodes)
    const nodes = [
      { name: 'Dienstplanung', position: new THREE.Vector3(-3, 0, 0) },
      { name: 'Verfügbarkeitsmodell', position: new THREE.Vector3(3, 0, 0) },
      { name: 'Patientenmanagement', position: new THREE.Vector3(0, 4, 0) },
    ];

    const nodeMaterial = new THREE.MeshBasicMaterial({ color: 0x0077ff });
    const nodeGeometry = new THREE.SphereGeometry(0.5, 32, 32);

    nodes.forEach(node => {
      const sphere = new THREE.Mesh(nodeGeometry, nodeMaterial);
      sphere.position.copy(node.position);
      scene.add(sphere);

      // Label
      const div = document.createElement('div');
      div.className = 'label';
      div.innerHTML = node.name;
      document.body.appendChild(div);

      node.label = div;
      node.sphere = sphere;
    });

    // Beziehungen (Edges)
    const edges = [
      [0, 1], // Dienstplanung ↔ Verfügbarkeitsmodell
      [2, 0], // Patientenmanagement → Dienstplanung
    ];

    edges.forEach(([a, b]) => {
      const material = new THREE.LineBasicMaterial({ color: 0xffffff });
      const points = [nodes[a].position, nodes[b].position];
      const geometry = new THREE.BufferGeometry().setFromPoints(points);
      const line = new THREE.Line(geometry, material);
      scene.add(line);
    });

    camera.position.z = 10;

    function animate() {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);

      nodes.forEach(node => {
        const vector = node.position.clone().project(camera);
        const x = (vector.x * 0.5 + 0.5) * window.innerWidth;
        const y = (-vector.y * 0.5 + 0.5) * window.innerHeight;
        node.label.style.left = `${x}px`;
        node.label.style.top = `${y}px`;
      });
    }

    animate();

    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });
  </script>
</body>
</html>
